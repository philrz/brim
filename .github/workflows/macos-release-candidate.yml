name: Brim macOS release candidate creation

on:
  push:
    branches:
      - rc-v*
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-10.15
    steps:
    - uses: actions/checkout@v2
    - name: Extract branch name
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - uses: actions/setup-go@v2
      with:
        go-version: '1.16'
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Set NPM Cache Directory
      id: set-npm-cache-dir
      run: echo "::set-output name=npm_cache_dir::$(npm config get cache)"
    - name: Clear Extraneous Runner Cache
      # Clear on-runner cache before we create our own cache to prevent
      # slower build times. See https://github.com/brimdata/brim/pull/590
      # and https://github.com/brimdata/brim/issues/641
      run: rm -rf "${NPM_CACHE:?}"
      env:
        NPM_CACHE: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
      shell: bash
    - name: Cache node modules
      uses: actions/cache@v2
      # Change the cache name any time you want to start with a cleared
      # cache.
      env:
        cache-name: cache-node-modules-ci-v5
      with:
        path: ${{ steps.set-npm-cache-dir.outputs.npm_cache_dir }}
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
    - if: ${{ !startsWith(steps.extract_branch.outputs.branch, 'rc-v') }}
      name: Set version string for ad hoc builds
      run: echo "ADHOC_VERSION_STRING=$(npm version preminor --no-git-tag-version --preid prerelease-${GITHUB_SHA:0:8})" >> $GITHUB_ENV
    - run: npm install --no-audit
    - run: npm run build
    - name: create build keychain and import Developer ID certificate into it
      run: |
        security create-keychain -p password build
        security default-keychain -s build
        security unlock-keychain -p password build
        f=$(mktemp)
        echo ${{ secrets.APPLE_DEVELOPER_ID_CERT_P12_BASE64 }} | base64 -d > $f
        security import $f -k build -A -T /usr/bin/codesign -T /usr/bin/security -f pkcs12  -P ${{ secrets.APPLE_DEVELOPER_ID_CERT_PASSPHRASE }}
        rm $f
        security set-key-partition-list -S apple-tool:,apple: -k password build
        security find-identity -p codesigning -v
    - name: build signed and notarized package (failure expected)
      # We've observed a problem with the new build system where the
      # notarization consistently fails because of an alleged lack of signing
      # of the file Corelight-CommunityID.darwin-x86_64.so. After much futile
      # debug, since these Zeek pieces are not expected to be part of the Brim
      # build for much longer, for now we're using the workaround of just
      # running the build step twice, as we've observed that it works
      # consistently on a retry.
      run: |
        npx electron-builder --mac || true
      env:
        APPLE_ID: ${{ secrets.APPLEID_USER }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLEID_PASSWORD }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: build signed and notarized package (success expected)
      # On the retry we've observed the "hanging" symptom similar to what's
      # described at https://github.com/electron/electron-packager/issues/701.
      # As implied there, repeating the "security" commands gets past the
      # problem.
      run: |
        security set-key-partition-list -S apple-tool:,apple: -k password build
        security find-identity -p codesigning -v
        npx electron-builder --mac
      env:
        APPLE_ID: ${{ secrets.APPLEID_USER }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLEID_PASSWORD }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: run gatekeeper assessment on notarized package
      run: spctl --assess --type execute --verbose --ignore-cache --no-cache dist/installers/mac/Brim.app
    - name: Setup Google Cloud Platform
      uses: google-github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        project_id: ${{ secrets.GCLOUD_PROJECT_ID }}
        service_account_key: ${{ secrets.GCLOUD_CREDENTIAL_RELEASES }}
    - if: ${{ startsWith(steps.extract_branch.outputs.branch, 'rc-v') }}
      name: "Set bucket path (if this is a release candidate)"
      run: echo "BUCKET_PATH=gs://${{ secrets.GCLOUD_BUCKET_RELEASES }}/brim/${{ steps.extract_branch.outputs.branch }}/macos" >> $GITHUB_ENV
    - if: ${{ !startsWith(steps.extract_branch.outputs.branch, 'rc-v') }}
      name: "Set bucket path (if this is an ad hoc build)"
      run: echo "BUCKET_PATH=gs://${{ secrets.GCLOUD_BUCKET_RELEASES }}/brim/${{ env.ADHOC_VERSION_STRING }}/macos" >> $GITHUB_ENV
    - name: "Set publicly-available bucket path"
      run: echo "PUBLIC_BUCKET_PATH=${BUCKET_PATH/gs:\/\//https://storage.googleapis.com/}" >> $GITHUB_ENV
    - name: Upload release artifacts to Google Cloud Storage bucket
      run: |
        gsutil rm -rf ${{ env.BUCKET_PATH }} || true
        gsutil cp dist/installers/Brim-*.dmg* dist/installers/Brim-*-mac.zip dist/installers/latest-mac.yml ${{ env.BUCKET_PATH }}
    - name: Assemble Slack message that points to multiple artifacts
      run: |
        echo "SLACK_TEXT<<EOF" >> $GITHUB_ENV
        echo "New macOS release available -" >> $GITHUB_ENV
        for FILENAME in $(find dist/installers -type f -name \*.dmg -exec basename {} \;)
        do
          echo "\n<${{ env.PUBLIC_BUCKET_PATH }}/$FILENAME|${{ env.BUCKET_PATH }}/$FILENAME>" >> $GITHUB_ENV
        done
        echo "EOF" >> $GITHUB_ENV
    - name: Inform Slack users at Brim HQ of the new artifact
      uses: tiloio/slack-webhook-action@v1.1.2
      with:
        slack_web_hook_url: ${{ secrets.SLACK_WEBHOOK_BRIMLABS_RELEASES }}
        slack_json: '{
                       "username": "release-automation",
                       "text": "${{ env.SLACK_TEXT }}"
                     }'
